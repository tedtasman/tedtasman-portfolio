{
    "joe": {
        "title": "Tic-Tac-Joe",
        "subtitle": "Exploring Machine Learning Through Tic-Tac-Toe",
        "body": "In this project, we developed an AI-driven Tic-Tac-Toe game to explore and apply machine learning concepts using TensorFlow. Our objective was to implement a neural network capable of learning and improving its gameplay strategies through iterative training. We started with a deep-learning model featuring three hidden layers, later optimizing it to a simpler architecture with one 15-neuron hidden layer to mitigate overfitting and enhance performance. The training process involved a combination of Q-learning and backpropagation, allowing the model to refine its strategies by playing against a \"smart-random\" opponent. Additionally, we designed a graphical user interface (GUI) to provide an intuitive and interactive user experience. The project not only solidified our understanding of machine learning principles but also demonstrated the potential of AI in game-based learning environments. The results showed significant improvement in the AI's performance, underscoring the effectiveness of our approach and paving the way for future, more complex machine learning endeavors."
    },
    "site": {
        "title": "ttasman.com",
        "subtitle": "Portfolio website built with React",
        "body": "This site was built to serve as a portfolio for showcasing my various coding projects. In addition, I used its creation as a chance to hone my skills in web development. Although probably not necessary, I chose to build the site using React to gain valuable experience in web development that can translate to the real world. In creating this site, I've greatly advanced my skills in JavaScript, HTML, CSS, and have gained a strong understanding of the web development process."
    },
    "jbod": {
        "title": "JBOD Controller",
        "subtitle": "MDADM implementation written in C",
        "body": "This program implements MDADM functionality for a virtual JBOD. Over the duration of a semester, I incrementally added various features to enable reading and writing to the JBOD. Primarily, the program uses logic to enable seemless reading and writing to and from the JBOD, including across multiple disks. The virtual JBOD operates with the constraint that only a full block can be written or read at once, so complex logic was needed to ensure proper functionality. Additionally, a cache was added to improve performance. The cache is implemented with an LRU algorithm enabling a balance of size and performance. Finally, networking functionality was added to enable reading and writing without a physical connection to the JBOD. This project has given me a strong foundation in low-level systems programming in C."
    },
    "scheduler": {
        "title": "Course Scheduler",
        "subtitle": "Java application for course scheduling",
        "body": "Built in Java, this application serves as a course scheduling program for a hypothetical college. A SQL database was used to store data on semesters, classes, students, and student enrollment. The admin page allows users to create new semesters, add courses, add sections of courses, and manage students. In the student page, users can enroll in classes and see their schedules. SQL statements are used in the implementation of these features, efficiently accessing entries from the database. This project gave me experience using and managing SQL databases and with Java Swing GUIs."
    }
}